name: Run Order Flow Analyzer

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install and configure OpenVPN with Diagnostics
        run: |
          # --- DIAGNOSTIC MODE ---
          # 'set -e' makes the script exit immediately if any command fails.
          # 'set -x' prints every command to the log before it is executed.
          # This will give us maximum visibility into what's happening.
          set -ex

          # Step 1: Install OpenVPN
          echo "--- 1. Installing OpenVPN ---"
          sudo apt-get update
          sudo apt-get install -y openvpn

          # Step 2: Write the secret to a temporary file
          echo "--- 2. Writing secret to temp_config.ovpn ---"
          echo "${{ secrets.OPENVPN_CONFIG }}" > temp_config.ovpn

          # --- DIAGNOSTIC STEP 2.1: VERIFY THE SECRET WAS WRITTEN ---
          echo "--- 2.1. Verifying temp_config.ovpn file content ---"
          # 'ls -l' shows the file size. If it's 0 or 1, the secret is likely empty.
          ls -l temp_config.ovpn
          # 'head -n 5' shows the first 5 lines of the file.
          echo "First 5 lines of the config file:"
          head -n 5 temp_config.ovpn
          echo "--- End of verification ---"

          # Step 3: Extract inline keys/certs into separate files.
          echo "--- 3. Extracting keys from temp_config.ovpn ---"
          awk '/<ca>/{flag=1; next} /<\/ca>/{flag=0} flag' temp_config.ovpn > ca.crt
          awk '/<key>/{flag=1; next} /<\/key>/{flag=0} flag' temp_config.ovpn > client.key
          awk '/<cert>/{flag=1; next} /<\/cert>/{flag=0} flag' temp_config.ovpn > client.crt
          awk '/<tls-auth>/{flag=1; next} /<\/tls-auth>/{flag=0} flag' temp_config.ovpn > tls.key

          # --- DIAGNOSTIC STEP 3.1: VERIFY KEY EXTRACTION ---
          echo "--- 3.1. Verifying extracted key files ---"
          # This will show the sizes of the generated key files. They should not be zero.
          ls -l ca.crt client.key client.crt tls.key
          echo "--- End of verification ---"
          
          # Step 4: Create a clean config file by removing the multi-line blocks.
          echo "--- 4. Creating clean protonvpn.ovpn config ---"
          cp temp_config.ovpn protonvpn.ovpn
          sed -i '/<ca>/,/<\/ca>/d' protonvpn.ovpn
          sed -i '/<cert>/,/<\/cert>/d' protonvpn.ovpn
          sed -i '/<key>/,/<\/key>/d' protonvpn.ovpn
          sed -i '/<tls-auth>/,/<\/tls-auth>/d' protonvpn.ovpn

          # Step 5: Add the paths to the new key files into the clean config.
          echo "--- 5. Appending key paths to clean config ---"
          echo -e "\nca ca.crt" >> protonvpn.ovpn
          echo "cert client.crt" >> protonvpn.ovpn
          echo "key client.key" >> protonvpn.ovpn
          echo "tls-auth tls.key 1" >> protonvpn.ovpn

          # Step 6: Write credentials to an auth file.
          echo "--- 6. Creating auth.txt file ---"
          echo "${{ secrets.VPN_USERNAME }}" > auth.txt
          echo "${{ secrets.VPN_PASSWORD }}" >> auth.txt

          # --- DIAGNOSTIC STEP 6.1: SHOW THE FINAL CONFIG BEFORE LAUNCH ---
          echo "--- 6.1. Displaying final protonvpn.ovpn before launch ---"
          cat protonvpn.ovpn
          echo "--- End of final config display ---"

          # Step 7: Launch the OpenVPN client.
          echo "--- 7. Launching OpenVPN client ---"
          sudo openvpn --config protonvpn.ovpn --auth-user-pass auth.txt --daemon --log openvpn.log

          # Step 8: Wait for connection.
          echo "--- 8. Waiting for VPN to establish ---"
          sleep 10

          # Step 9: Verify and debug.
          echo "--- 9. Final Verification ---"
          echo "--- Checking VPN log for status (look for 'Initialization Sequence Completed') ---"
          # 'cat' will print the entire log file, giving us maximum debug info.
          cat openvpn.log
          echo "--- Verifying public IP address ---"
          curl -s http://whatismyip.akamai.com/ || echo "Curl failed, VPN might not be connected."

      # The rest of the workflow continues as before.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create API key file from secret
        run: echo "${{ secrets.CMC_API_KEY }}" > CoinMarketCapAPIKey.txt

      - name: Run the Order Flow Analyzer script
        run: python3 GITOrderFlowImbalanceAnalyzer.py
