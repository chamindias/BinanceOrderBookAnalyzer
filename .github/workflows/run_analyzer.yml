name: Run Order Flow Analyzer

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install and configure OpenVPN
        run: |
          # Set flags to exit on error and print commands
          set -ex

          # Step 1: Install OpenVPN
          echo "--- 1. Installing OpenVPN ---"
          sudo apt-get update
          sudo apt-get install -y openvpn

          # Step 2: Write the secret to a temporary file
          echo "--- 2. Writing secret to temp_config.ovpn ---"
          echo "${{ secrets.OPENVPN_CONFIG }}" > temp_config.ovpn

          # --- THIS IS THE CRITICAL FIX ---
          # Step 3: Extract inline keys/certs using a robust pattern that handles attributes.
          # The pattern '/<tag[ >]/' matches '<tag>' OR '<tag ' (with a space),
          # correctly finding tags like <key direction="1">.
          echo "--- 3. Extracting keys with robust pattern ---"
          awk '/<ca[ >]/{flag=1; next} /<\/ca>/{flag=0} flag' temp_config.ovpn > ca.crt
          awk '/<key[ >]/{flag=1; next} /<\/key>/{flag=0} flag' temp_config.ovpn > client.key
          awk '/<cert[ >]/{flag=1; next} /<\/cert>/{flag=0} flag' temp_config.ovpn > client.crt
          awk '/<tls-auth[ >]/{flag=1; next} /<\/tls-auth>/{flag=0} flag' temp_config.ovpn > tls.key

          # --- DIAGNOSTIC: Verify key extraction ---
          echo "--- 3.1. Verifying extracted key files (should be > 0 bytes) ---"
          ls -l ca.crt client.key client.crt tls.key
          
          # Step 4: Create a clean config file by properly removing the multi-line blocks.
          echo "--- 4. Creating clean protonvpn.ovpn config ---"
          cp temp_config.ovpn protonvpn.ovpn
          sed -i '/<ca[ >]/,/<\/ca>/d' protonvpn.ovpn
          sed -i '/<cert[ >]/,/<\/cert>/d' protonvpn.ovpn
          sed -i '/<key[ >]/,/<\/key>/d' protonvpn.ovpn
          sed -i '/<tls-auth[ >]/,/<\/tls-auth>/d' protonvpn.ovpn

          # Step 5: Add the paths to the new key files into the clean config.
          echo "--- 5. Appending key paths to clean config ---"
          echo -e "\nca ca.crt" >> protonvpn.ovpn
          echo "cert client.crt" >> protonvpn.ovpn
          echo "key client.key" >> protonvpn.ovpn
          echo "tls-auth tls.key 1" >> protonvpn.ovpn

          # Step 6: Write credentials to an auth file.
          echo "--- 6. Creating auth.txt file ---"
          echo "${{ secrets.VPN_USERNAME }}" > auth.txt
          echo "${{ secrets.VPN_PASSWORD }}" >> auth.txt

          # Step 7: Launch the OpenVPN client.
          echo "--- 7. Launching OpenVPN client ---"
          sudo openvpn --config protonvpn.ovpn --auth-user-pass auth.txt --daemon --log openvpn.log

          # Step 8: Wait for connection.
          echo "--- 8. Waiting for VPN to establish ---"
          sleep 10

          # Step 9: Final verification.
          echo "--- 9. Final Verification ---"
          echo "--- Checking VPN log for status (look for 'Initialization Sequence Completed') ---"
          cat openvpn.log
          echo "--- Verifying public IP address ---"
          curl --fail http://whatismyip.akamai.com/ || (echo "Curl failed, VPN did not connect. See log above." && exit 1)

      # The rest of the workflow continues as before.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create API key file from secret
        run: echo "${{ secrets.CMC_API_KEY }}" > CoinMarketCapAPIKey.txt

      - name: Run the Order Flow Analyzer script
        run: python3 GITOrderFlowImbalanceAnalyzer.py
